from collections import deque

class Dinic:
    def __init__(self, n):
        """
        ????????????? ?????.
        :param n: ?????????? ?????? ? ?????.
        """
        self.n = n
        self.graph = [[] for _ in range(n)]  # ?????? ?????????
        self.capacity = {}  # ?????????? ??????????? ?????

    def add_edge(self, u, v, cap):
        """
        ???????? ??????????????? ????? ? ????.
        :param u: ????????? ???????.
        :param v: ???????? ???????.
        :param cap: ?????????? ??????????? ?????.
        """
        self.graph[u].append(v)
        self.graph[v].append(u)
        self.capacity[(u, v)] = cap
        self.capacity[(v, u)] = 0  # ???????? ????? ? ?????????? ???????????? 0

    def bfs(self, source, sink):
        """
        ?????????? ?????? ????? ? ?????????????? ?????? ? ??????.
        :param source: ?????.
        :param sink: ????.
        :return: True, ???? ???? ?? ????? ??????????; ????? False.
        """
        self.level = [-1] * self.n
        self.level[source] = 0
        queue = deque([source])

        while queue:
            u = queue.popleft()
            for v in self.graph[u]:
                if self.level[v] == -1 and self.capacity[(u, v)] > 0:
                    self.level[v] = self.level[u] + 1
                    queue.append(v)

        return self.level[sink] != -1

    def dfs(self, u, flow, sink, ptr):
        """
        ??????????? ????? ????? ?????????? ??????.
        :param u: ??????? ???????.
        :param flow: ?????, ????????? ??? ????????.
        :param sink: ????.
        :param ptr: ????????? ?? ??????? ????? ??? ?????? ???????.
        :return: ????? ??????????? ??????.
        """
        if u == sink:
            return flow

        while ptr[u] < len(self.graph[u]):
            v = self.graph[u][ptr[u]]

            if self.level[v] == self.level[u] + 1 and self.capacity[(u, v)] > 0:
                pushed = self.dfs(v, min(flow, self.capacity[(u, v)]), sink, ptr)
                if pushed > 0:
                    self.capacity[(u, v)] -= pushed
                    self.capacity[(v, u)] += pushed
                    return pushed

            ptr[u] += 1

        return 0

    def max_flow(self, source, sink):
        """
        ???????? ??????? ??? ?????????? ????????????? ??????.
        :param source: ?????.
        :param sink: ????.
        :return: ???????? ????????????? ??????.
        """
        total_flow = 0

        while self.bfs(source, sink):
            ptr = [0] * self.n
            while True:
                flow = self.dfs(source, float('inf'), sink, ptr)
                if flow == 0:
                    break
                total_flow += flow

        return total_flow


# ?????? ?????????????
if name == "__main__":
    # ??????? ???? ? 6 ?????????
    graph = Dinic(6)

    # ????????? ?????
    graph.add_edge(0, 1, 16)
    graph.add_edge(0, 2, 13)
    graph.add_edge(1, 2, 10)
    graph.add_edge(1, 3, 12)
    graph.add_edge(2, 1, 4)
    graph.add_edge(2, 4, 14)
    graph.add_edge(3, 2, 9)
    graph.add_edge(3, 5, 20)
    graph.add_edge(4, 3, 7)
    graph.add_edge(4, 5, 4)

    # ????? = 0, ???? = 5
    source, sink = 0, 5
    max_flow = graph.max_flow(source, sink)
    print(f"???????????? ?????: {max_flow}")
